{"version":3,"sources":["components/HomeScreen.js","components/PlayerSelectionScreen.js","utils/randomize.js","constants/maps.js","constants/difficulties.js","constants/transports.js","constants/penalties.js","constants/botsCars.js","components/MainGameScreen.js","App.js","index.js"],"names":["HomeScreen","navigate","useNavigate","React","createElement","style","height","display","justifyContent","alignItems","background","Card","width","textAlign","borderRadius","boxShadow","Typography","Title","level","fontSize","marginBottom","color","Button","type","size","onClick","padding","PlayerSelectionScreen","players","setPlayers","useState","Fragment","flexWrap","gap","backgroundColor","map","active","index","key","cursor","updatedPlayers","togglePlayer","concat","handleContinue","activePlayers","isActive","filter","player","length","state","alert","marginTop","marginLeft","marginRight","getRandomItem","array","Math","floor","random","getRandomPenalties","penalties","result","p","probability","text","MAPS","DIFFICULTIES","TRANSPORTS","ALWAYS_PENALTIES","RANDOM_PENALTIES","BOTS_CARS","MainGameScreen","_location$state","location","useLocation","Paragraph","difficulty","playerSettings","transport","borderRight","icon","ReloadOutlined","window","reload","Divider","paddingLeft","penalty","idx","flex","settings","flexDirection","flexBasis","App","Router","Routes","Route","path","element","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.46780a8d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, Button, Typography } from 'antd';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst HomeScreen = () => {\r\n    const navigate = useNavigate();\r\n\r\n    return (\r\n        <div style={{ height: '100vh', display: 'flex', justifyContent: 'center', alignItems: 'center', background: '#181818' }}>\r\n            <Card\r\n                style={{\r\n                    width: '400px',\r\n                    textAlign: 'center',\r\n                    borderRadius: '12px',\r\n                    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\r\n                }}\r\n            >\r\n                <Typography.Title level={1} style={{ fontSize: '32px', marginBottom: '20px', color: '#181818' }}>\r\n                    Разбился - пей пенное!\r\n                </Typography.Title>\r\n                <Button\r\n                    type=\"primary\"\r\n                    size=\"large\"\r\n                    onClick={() => navigate('/player-selection')}\r\n                    style={{\r\n                        fontSize: '20px',\r\n                        padding: '12px 24px',\r\n                        borderRadius: '8px',\r\n                    }}\r\n                >\r\n                    Готов!\r\n                </Button>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomeScreen;\r\n","import React, { useState } from 'react';\r\nimport { Card, Button, Typography } from 'antd';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst PlayerSelectionScreen = () => {\r\n    const [players, setPlayers] = useState([false, false, false, false]);\r\n    const navigate = useNavigate();\r\n\r\n    const togglePlayer = (index) => {\r\n        const updatedPlayers = [...players];\r\n        updatedPlayers[index] = !updatedPlayers[index];\r\n        setPlayers(updatedPlayers);\r\n    };\r\n\r\n    const handleContinue = () => {\r\n        const activePlayers = players.map((isActive, index) => (isActive ? index + 1 : null)).filter(player => player !== null);\r\n        if (activePlayers.length === 0) {\r\n            alert('Выберите хотя бы одного игрока!');\r\n            return;\r\n        }\r\n        navigate('/main-game', { state: { players: activePlayers } });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div style={\r\n                {\r\n                    height: '80vh',\r\n                    display: 'flex',\r\n                    flexWrap: 'wrap',\r\n                    gap: '20px',\r\n                    padding: '20px',\r\n                    justifyContent: 'center',\r\n                    backgroundColor: '#181818'\r\n                }}>\r\n                {players.map((active, index) => (\r\n                    <Card\r\n                        key={index}\r\n                        style={{\r\n                            background: active ? '#1890ff' : '#3c3c3c',\r\n                            color: '#fff',\r\n                            display: 'flex',\r\n                            justifyContent: 'center',\r\n                            alignItems: 'center',\r\n                            borderRadius: '12px',\r\n                            width: 'calc(50% - 20px)',\r\n                            height: '45%',\r\n                            cursor: 'pointer',\r\n                        }}\r\n                        onClick={() => togglePlayer(index)}\r\n                    >\r\n                        <Typography.Title level={2} style={{ color: 'inherit' }}>{`Игрок ${index + 1}`}</Typography.Title>\r\n                    </Card>\r\n                ))}\r\n            </div>\r\n            <div\r\n                style={{\r\n                    height: 'calc(20vh - 40px)',\r\n                    justifyContent: 'center',\r\n                    backgroundColor: '#181818'\r\n                }}>\r\n                <Button\r\n                    type=\"primary\"\r\n                    onClick={handleContinue}\r\n                    style={{\r\n                        marginTop: '10px',\r\n                        marginLeft: '20px',\r\n                        marginRight: '20px',\r\n                        fontSize: '18px',\r\n                        borderRadius: '8px',\r\n                        width: 'calc(100% - 40px)',\r\n                        height: '40px'\r\n                    }}\r\n                >\r\n                    Продолжить\r\n                </Button>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PlayerSelectionScreen;\r\n","export function getRandomItem(array) {\r\n    return array[Math.floor(Math.random() * array.length)];\r\n}\r\n\r\nexport function getRandomPenalties(penalties) {\r\n    const result = penalties.filter(p => Math.random() * 100 <= p.probability);\r\n    if (result.length > 0) {\r\n        return result[result.length - 1].text\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n","export const MAPS = [\r\n  'Тюремный рок',\r\n  'Объединение психов',\r\n  'Давление',\r\n  'Волнорез',\r\n  'Морские брызги',\r\n  'Причал',\r\n  'Корабль',\r\n  'Груз',\r\n  'В тумане',\r\n  'Великая депрессия',\r\n  'Крысиная атака',\r\n  'За покупками',\r\n  'Кредитное сжатик',\r\n  'Мост в никуда',\r\n  'Buena Vista',\r\n  'Не добраться',\r\n  'Двухэтажный автобус',\r\n  'Воины дорог',\r\n  'Автомагистраль',\r\n  'Во все глаза',\r\n  'Конец близок',\r\n  'Под откос',\r\n  'Тупик',\r\n  'Основная линия',\r\n  'Клуб аэролюбителей',\r\n  'Асы в небе',\r\n  'Головокружение',\r\n  'Границы города',\r\n  'Военные игры',\r\n  'Предельная скорость',\r\n  'Автобусная вечеринка',\r\n  'Добро пожаловать',\r\n  'Горячая выпечка',\r\n  'Встряска в пригороде',\r\n  'Развеяться в дыму'\r\n];","export const DIFFICULTIES = ['Новичок', 'Профи', 'Ветеран'];","export const TRANSPORTS = [\r\n    'Кроссовый мотоцикл',\r\n    'Мотовездеход',\r\n    'Багги',\r\n    'Ралийный автомобиль',\r\n    'Внедорожник',\r\n    'Вездеход',\r\n    'Грузовик',\r\n    'Бигфут',\r\n    'Спортивный мотоцикл',\r\n    'Чоппер',\r\n    'Малолитражка',\r\n    'Суперкар',\r\n    'Маслкар'\r\n  ];","export const ALWAYS_PENALTIES = [\r\n    'Разбился - пей пенное',\r\n    'Перезапуск - глоток пенного',\r\n    'Не успел закончить гонку - глоток пенного'\r\n];\r\n\r\nexport const RANDOM_PENALTIES = [\r\n    { text: 'Не пить пенное', probability: 5 },\r\n    { text: 'Пьёшь два глотка пенного', probability: 5 },\r\n    { text: 'Пьёшь три глотка пенного', probability: 3 },\r\n    { text: 'Пьёшь пол стопки крепкого один раз за гонку', probability: 2 },\r\n    { text: 'Все игроки пьют по одному глотку пенного', probability: 10 },\r\n    { text: 'Разрешён перезапуск гонки для тебя', probability: 5 },\r\n    { text: 'Пьёшь два глотка пенного, но один из них выпивает другой игрок', probability: 5 },\r\n    { text: 'Пьёшь три глотка пенного, но один из них выпивает другой игрок', probability: 5 },\r\n    { text: 'Другой игрок пьёт за тебя', probability: 5 },\r\n    { text: 'Все игроки пьют по два глотка пенного', probability: 5 },\r\n];","export const BOTS_CARS = [\r\n    { text: 'Мотовездеход', probability: 10 },\r\n    { text: 'Бигфут', probability: 10 },\r\n];","import React from 'react';\r\nimport { getRandomItem, getRandomPenalties } from '../utils/randomize';\r\nimport { Card, Typography, Button, Divider } from 'antd';\r\nimport { MAPS } from '../constants/maps';\r\nimport { DIFFICULTIES } from '../constants/difficulties';\r\nimport { TRANSPORTS } from '../constants/transports';\r\nimport { ALWAYS_PENALTIES, RANDOM_PENALTIES } from '../constants/penalties';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { BOTS_CARS } from '../constants/botsCars';\r\nimport { ReloadOutlined } from '@ant-design/icons';\r\n\r\nconst MainGameScreen = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n\r\n  const players = location.state?.players;\r\n\r\n  if (!players || players.length === 0) {\r\n    return (\r\n      <div style={{ textAlign: 'center', padding: '20px' }}>\r\n        <Typography.Title level={2} style={{ color: '#f5222d' }}>Ошибка</Typography.Title>\r\n        <Typography.Paragraph style={{ color: '#fff' }}>\r\n          Нет данных о выбранных игроках. Вернитесь назад.\r\n        </Typography.Paragraph>\r\n        <Button type=\"primary\" onClick={() => navigate('/player-selection')}>\r\n          Назад к выбору игроков\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const map = getRandomItem(MAPS);\r\n  const difficulty = getRandomItem(DIFFICULTIES);\r\n  const playerSettings = players.map(() => ({\r\n    transport: getRandomItem(TRANSPORTS),\r\n    penalties: getRandomPenalties(RANDOM_PENALTIES),\r\n  }));\r\n\r\n  return (\r\n    <div style={{ display: 'flex', height: '100vh', backgroundColor: '#181818' }}>\r\n      {/* Левая панель */}\r\n      <div style={{ width: '30%', padding: '20px', color: '#fff', borderRight: '2px solid #444', backgroundColor: '#fff' }}>\r\n        <Typography.Title level={3}>\r\n          Общие настройки\r\n          <Button\r\n            icon={<ReloadOutlined />}\r\n            type=\"text\"\r\n            style={{ color: '#181818' }}\r\n            onClick={() => window.location.reload()}\r\n          />\r\n        </Typography.Title>\r\n        <Divider />\r\n        <Typography.Paragraph>\r\n          <strong>Карта:</strong> {map}\r\n        </Typography.Paragraph>\r\n        <Typography.Paragraph>\r\n          <strong>Сложность:</strong> {difficulty}\r\n        </Typography.Paragraph>\r\n        <Typography.Paragraph>\r\n          <strong>Боты едут на:</strong> {getRandomPenalties(BOTS_CARS) || 'Случайно'}\r\n        </Typography.Paragraph>\r\n        <Typography.Paragraph>\r\n          <strong>Правила:</strong>\r\n          <ul style={{ paddingLeft: '20px' }}>\r\n            {ALWAYS_PENALTIES.map((penalty, idx) => (\r\n              <li key={idx}>{penalty.text || penalty}</li>\r\n            ))}\r\n          </ul>\r\n        </Typography.Paragraph>\r\n      </div>\r\n      {/* Правая панель */}\r\n      <div style={{ flex: 1, display: 'flex', flexWrap: 'wrap', gap: '20px', padding: '20px' }}>\r\n        {playerSettings.map((settings, index) => (\r\n          <Card\r\n            key={index}\r\n            style={{\r\n              color: '#fff',\r\n              borderRadius: '12px',\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              justifyContent: 'space-between',\r\n              padding: '20px',\r\n              flexBasis: 'calc(50% - 10px)', // Для двух элементов в ряду\r\n            }}\r\n          >\r\n            <Typography.Title level={4}>{`Игрок ${index + 1}`}</Typography.Title>\r\n            <Typography.Paragraph><strong>Транспорт:</strong> {settings.transport}</Typography.Paragraph>\r\n            <Typography.Paragraph>\r\n              <strong>Штрафы/Бонусы:</strong>\r\n              {settings.penalties ?\r\n                <ul style={{ paddingLeft: '20px' }}>\r\n                  <li>{settings.penalties}</li>\r\n                </ul> :\r\n                <></>\r\n              }\r\n            </Typography.Paragraph>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainGameScreen;\r\n","import React from 'react';\r\nimport { HashRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport HomeScreen from './components/HomeScreen';\r\nimport PlayerSelectionScreen from './components/PlayerSelectionScreen';\r\nimport MainGameScreen from './components/MainGameScreen';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route path=\"/\" element={<HomeScreen />} />\r\n        <Route path=\"/player-selection\" element={<PlayerSelectionScreen />} />\r\n        <Route path=\"/main-game\" element={<MainGameScreen />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  // <React.StrictMode>\r\n    <App />\r\n  // </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}